# Tidying GBIF Data
# Noah Hearne
# April, 2021

#---------------------------------
# Load libraries
library(tidyverse)
library(lubridate)
library(purrr)

# Short function to get decades (from Natalie)
floor_decade <- function(x){ # Defines function
  if(!is.na(x)){             # If x is not NA, continue
    x - x %% 10              # Subtract x from x and then divide by 10
  }else{NA_character_}       # If x is NA, it is a NA as character type
}

#---------------------------------------------------------------
# Read in the GBIF data (Namibia country code already changed to "NM")
#---------------------------------------------------------------

# Mammals
nhmuk_m <- read_delim("Data/Raw GBIF Data/NM Edits/NHM-Mammals_NM.txt", delim = "\t") #"\t" means tab delimited


# Birds
nhmuk_b <- read_delim("Data/Raw GBIF Data/NM Edits/NHM-Birds_NM.txt", delim = "\t")

# Combine into a list
all <- list(nhmuk_b, 
            nhmuk_m)

# Combine based on shared columns
# and make a new binomial column
ds <- all %>%
  map(function(x) x[Reduce(intersect, map(all, colnames))]) %>% # Combines elements, excluding duplicates(?)
  reduce(rbind) # Applies rbind to each value in the list(?)

#----------------------------------
# Tidy up the data
#----------------------------------

ds2 <-
  
  ds %>%
  
  # Remove paleo collections from NHMUK data and other incorrect codes
  filter(collectionCode != "BOT" & collectionCode != "BMNH(E)" & # Filters all matching instances out
           collectionCode != "Unknown BMNH/M" & collectionCode != "PAL" & !is.na(collectionCode)) %>%               # I found these codes with count(ds, collectionCode)
  
  # Remove weird collections that aren't the key dataset
  filter(institutionCode == "NHMUK") %>% # Filters only the correct code of NHMUK through
  
  # Check that all included records are specimens not observations
  filter(basisOfRecord == "PRESERVED_SPECIMEN" | basisOfRecord == "FOSSIL_SPECIMEN") %>% #Filters only the correct specimen types through
  
  # Create a new column for specimen ID number
  unite(col = specID, `institutionCode`, `catalogNumber`, sep = "_", remove = FALSE) %>% # Combines institution code and catalogue number to make a unique ID

  # Replace the poorly coded year data with NAs
  mutate(year = as.numeric(year)) %>% # This makes all year values numeric
  mutate(year = ifelse(year > 2021 | year < 1750, NA_character_, year)) %>% # Makes year NA if it is above 2021 or below 1750
  # Coerce to numeric again
  mutate(year = as.numeric(year)) %>% # This makes all year values numeric, again
  
  # Add decade variable (function above)
  # This maps to character to deal with NAs so needs coercing back to numeric
  mutate(decade = map_chr(year, floor_decade)) %>% # Creates a new column, requiring a character from year in the decade function
  mutate(decade = as.numeric(decade))  %>% # This makes all decade values numeric
  
  # TAXONOMY (note there is a second set of checks later)
  # 1. Remove entries where we only have the Genus
  # 2. Create binomial column
  separate(species, c("Genus", "Species"), sep = " ", # Splits the species name (told that it is split by a space) into two columns (Genus and Species)
           extra = "drop", fill = "right") %>%        # This will keep only the first two words, dropping any extra; also, fills missing values(?) 
  filter(!is.na(Species) & Species != "sp." & Species != "sp") %>% # Removes NAs and undefined species
  unite("binomial", Genus, Species, sep = " ") %>% # Combines Genus and Species columns into one (binomial)
  
  # Remove entries with no order designated (these are errors)
  filter(!is.na(order)) %>%
  
  # Add a name bearing type column and designate name bearing types as such
  # Non types
  mutate(type = if_else(is.na(typeStatus), "NonType", typeStatus)) %>% # Creates a new column (TypeStatus), sets NAs as NonType, keeps other type statuses 
  
  # Name bearing types
  mutate(type = str_replace(type, "HOLOTYPE", "Type")) %>% # Checks for words ("HOLOTYPE", etc.) and replaces them with name-bearing or non-name-bearing status
  mutate(type = str_replace(type, "SYNTYPE", "Type")) %>%
  mutate(type = str_replace(type, "LECTOTYPE", "Type")) %>%
  mutate(type = str_replace(type, "NEOTYPE", "Type")) %>%
  
  # Non name bearing types
  mutate(type = str_replace(type, "COTYPE", "NonNameType")) %>%
  mutate(type = str_replace(type, "ALLOTYPE", "NonNameType")) %>%
  mutate(type = str_replace(type, "PARALECTOTYPE", "NonNameType")) %>%
  mutate(type = str_replace(type, "PARAType", "NonNameType")) %>%
  mutate(type = str_replace(type, "PARATYPE", "NonNameType")) %>%
  mutate(type = str_replace(type, "TOPOTYPE", "NonNameType")) %>% 
  mutate(type = str_replace(type, "HYPOTYPE", "NonNameType")) %>% 
  
  # It is unclear if these are name bearing or not
  mutate(type = str_replace(type, "TYPE", "AmbiguousType")) %>%
  
  # Rename classes to english names
  mutate(class = str_replace_all(class, "Aves", "Birds")) %>%
  mutate(class = str_replace_all(class, "Mammalia", "Mammals")) %>%
  
  # Select just the columns of interest
  dplyr::select(collectionCode, basisOfRecord, countryCode, specID, 
         binomial, class, order, family, genus,
         continent, year, decade, typeStatus, type, 
         recordedBy, higherGeography, island, locality) 

# Removing specimen with "zoo" in the locality
ds2 <- ds2[!grepl("zoo", ds2$locality),]
ds2 <- ds2[!grepl("Zoo", ds2$locality),]
ds2 <- ds2[!grepl("ZOO", ds2$locality),]
ds2 <- ds2[!grepl("ZOo", ds2$locality),]
ds2 <- ds2[!grepl("ZoO", ds2$locality),]
ds2 <- ds2[!grepl("zoO", ds2$locality),]
ds2 <- ds2[!grepl("ZOO", ds2$locality),]
ds2 <- ds2[!grepl("ZOo", ds2$locality),]

# Write cleaned specimen data for counting and matching to other datasets
# write_csv(ds2, file = "Data/CleanedData.csv")
